#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Person {
public:
 Person (string name, string t = "Person") : Name(name), type(t) {} 
    virtual void Walk (string destination) const {
        cout << type << ": " << Name << " walks to: " << destination << endl;
    }
    const string Name;
    const string type ;
};


class Student : public Person {
public:
    Student(string name, string favouriteSong): Person(name, "Student"), FavouriteSong(favouriteSong) {} 

    void Learn() const {
        cout << type << ": " << Name << " learns" << endl;
    }

    void Walk(string destination) const override {
        cout << type << ": " << Name << " walks to: " << destination << endl;
        SingSong();
    }

    void SingSong() const {
        cout << type << ": " << Name << " sings a song: " << FavouriteSong << endl;
    }

    string FavouriteSong;
};


class Teacher : public Person {
public:

    Teacher(string name, string subject) : Person(name, "Teacher"), Subject(subject)  {}

    void Teach() const {
        cout << type << ": " << Name << " teaches: " << Subject << endl;
    }

    string Subject;
};


class Policeman : public Person {
public:
    Policeman(string name) : Person(name, "Policeman") {}

    void Check(Person& p) {
        cout << type << ": " << Name << " checks " << p.type << ". " 
             << p.type << "'s name is: " << p.Name << endl;
    }

};


void VisitPlaces (Person& person, vector <string> places) {
    for (auto const & p : places) {
        person.Walk(p);
    }
}


int main() {
    Teacher t("Jim", "Math");
    Student s("Ann", "We will rock you");
    Policeman p("Bob");
    p.Check(s);

    VisitPlaces(t, {"Moscow", "London"});
    VisitPlaces(s, {"Moscow", "London"});
    VisitPlaces(p, {"Moscow"});
    return 0;
}
